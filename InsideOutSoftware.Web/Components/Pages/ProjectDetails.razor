@page "/project/{projectId}"
@using System.IO
@using System.Reflection
@using InsideOutSoftware.Web.Models
@using InsideOutSoftware.Web.Services
@inject ProjectService ProjectService

<div class="container mt-4">
    <div class="project-details">
        <div class="mb-3">
            <a href="/#projects" class="btn btn-primary">
                <i class="bi bi-arrow-left"></i> Back to Projects
            </a>
        </div>
        
        <div class="project-details-header">
            <h2>@project?.Title</h2>
            <p>@project?.Description</p>
            @if (!string.IsNullOrWhiteSpace(project?.Link))
            {
                <a href="@project.Link" target="_blank" class="project-link">
                    <span>Visit Project</span>
                    <i class="bi bi-box-arrow-up-right"></i>
                </a>
            }
        </div>
        
        @if (project?.Type == ProjectType.ImageGallery)
        {
            <div class="project-gallery">
                <div class="gallery-grid">
                    @for (int i = 0; i < Math.Min(5, images.Length); i++)
                    {
                        <div class="gallery-item">
                            <img
                                class="gallery-image @(project.Border ? "img-border" : "")"
                                src="/Images/@project.ImgFolder/@images[i].Name"
                                alt="Project Image"/>
                        </div>
                    }
                </div>
            </div>
        }
        else if (project?.Type == ProjectType.WebComponent)
        {
            <div class="web-project-container">
                @if (!string.IsNullOrEmpty(project.ComponentName))
                {
                    <DynamicComponent Type="@GetComponentType(project.ComponentName)" />
                }
                else
                {
                    <div class="alert alert-warning">
                        Component not found.
                    </div>
                }
            </div>
        }
        else if (project?.Type == ProjectType.HtmlProject)
        {
            <div class="web-project-container">
                <HtmlProject ProjectUrl="@project.ProjectUrl" Title="@project.Title" />
            </div>
        }
    </div>
</div>

@code
{
    private FileInfo[] images { get; set; } = Array.Empty<FileInfo>();
    private ProjectModel project;
    
    [Parameter]
    public string ProjectId { get; set; }
    
    [Inject]
    private IJSRuntime JSRuntime { get; set; }

    protected override void OnInitialized()
    {
        project = ProjectService.GetProjectById(ProjectId);
        
        if (project != null && project.Type == ProjectType.ImageGallery && !string.IsNullOrWhiteSpace(project.ImgFolder))
        {
            var di = new DirectoryInfo(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", project.ImgFolder));
            if (di.Exists)
            {
                images = di.GetFiles();
            }
        }
        
        base.OnInitialized();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("window.scrollTo", 0, 0);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
    
    private Type GetComponentType(string componentName)
    {
        try
        {
            var assembly = Assembly.GetExecutingAssembly();
            var type = assembly.GetType(componentName);
            return type;
        }
        catch
        {
            return null;
        }
    }
}