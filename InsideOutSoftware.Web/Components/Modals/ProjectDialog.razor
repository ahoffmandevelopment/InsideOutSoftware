<div class="project-dialog">
    <div class="project-dialog-header">
        <h2>@Description</h2>
        @if (!string.IsNullOrWhiteSpace(Link))
        {
            <a href="@Link" target="_blank" class="project-link">
                <span>Visit Project</span>
                <i class="bi bi-box-arrow-up-right"></i>
            </a>
        }
    </div>
    
    <div class="project-gallery">
        <div class="gallery-row">
            @for (int i = 0; i < Math.Min(3, images.Length); i++)
            {
                <div class="gallery-item">
                    <img
                        class="gallery-image @(Border ? "img-border" : "")"
                        src="Images/@ImgFolder/@images[i].Name"
                        alt="Project Image"/>
                </div>
            }
        </div>
    
        @if (images.Length > 3)
        {
            <div class="gallery-row">
                @for (int i = 3; i < Math.Min(5, images.Length); i++)
                {
                    <div class="gallery-item gallery-item-large">
                        <img
                            class="gallery-image @(Border ? "img-border" : "")"
                            src="Images/@ImgFolder/@images[i].Name"
                            alt="Project Image"/>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code
{
    private FileInfo[] images { get; set; } = Array.Empty<FileInfo>();
    
    [Parameter]
    public string Description { get; set; }
    
    [Parameter]
    public string ImgFolder { get; set; }
    
    [Parameter]
    public string Link { get; set; }
    
    [Parameter]
    public bool Border { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrWhiteSpace(ImgFolder))
        {
            var di = new DirectoryInfo(Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", ImgFolder));
            if (di.Exists)
            {
                images = di.GetFiles();
            }
        }
        
        base.OnInitialized();
    }
}