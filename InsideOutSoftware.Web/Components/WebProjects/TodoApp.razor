@namespace InsideOutSoftware.Web.Components.WebProjects
@using Microsoft.AspNetCore.Components.Web

<div class="todo-app">
    <div class="todo-header">
        <h3>Todo App</h3>
        <div class="todo-input-container">
            <input type="text" 
                   class="todo-input" 
                   placeholder="Add a new task..." 
                   @bind="newTodoText" 
                   @bind:event="oninput" 
                   @onkeyup="HandleKeyUp" />
            <button class="add-button" @onclick="AddTodo">Add</button>
        </div>
    </div>
    
    <div class="todo-filters">
        <button class="filter-button @(currentFilter == "all" ? "active" : "")" @onclick="FilterAll">All</button>
        <button class="filter-button @(currentFilter == "active" ? "active" : "")" @onclick="FilterActive">Active</button>
        <button class="filter-button @(currentFilter == "completed" ? "active" : "")" @onclick="FilterCompleted">Completed</button>
    </div>
    
    <div class="todo-list">
        @foreach (var todo in filteredTodos)
        {
            <div class="todo-item @(todo.IsCompleted ? "completed" : "")">
                <div class="todo-checkbox-container">
                    <input type="checkbox" checked="@todo.IsCompleted" @onchange="() => ToggleTodo(todo)" />
                    <span class="todo-text">@todo.Text</span>
                </div>
                <button class="delete-button" @onclick="() => DeleteTodo(todo)">Ã—</button>
            </div>
        }
    </div>
    
    @if (todos.Count > 0)
    {
        <div class="todo-footer">
            <span>@ActiveTodosCount item@(ActiveTodosCount == 1 ? "" : "s") left</span>
            @if (CompletedTodosCount > 0)
            {
                <button class="clear-completed" @onclick="ClearCompleted">Clear completed</button>
            }
        </div>
    }
</div>

@code {
    private List<TodoItem> todos = new List<TodoItem>();
    private string newTodoText = "";
    private string currentFilter = "all";
    
    private List<TodoItem> filteredTodos => currentFilter switch
    {
        "active" => todos.Where(t => !t.IsCompleted).ToList(),
        "completed" => todos.Where(t => t.IsCompleted).ToList(),
        _ => todos
    };
    
    private int ActiveTodosCount => todos.Count(t => !t.IsCompleted);
    private int CompletedTodosCount => todos.Count(t => t.IsCompleted);
    
    protected override void OnInitialized()
    {
        // Add some sample todos
        todos.Add(new TodoItem { Id = 1, Text = "Learn Blazor", IsCompleted = true });
        todos.Add(new TodoItem { Id = 2, Text = "Build a todo app", IsCompleted = true });
        todos.Add(new TodoItem { Id = 3, Text = "Add it to portfolio", IsCompleted = false });
        todos.Add(new TodoItem { Id = 4, Text = "Share with others", IsCompleted = false });
    }
    
    private void HandleKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            AddTodo();
        }
    }
    
    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodoText))
        {
            var newId = todos.Count > 0 ? todos.Max(t => t.Id) + 1 : 1;
            todos.Add(new TodoItem { Id = newId, Text = newTodoText });
            newTodoText = "";
        }
    }
    
    private void ToggleTodo(TodoItem todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
    }
    
    private void DeleteTodo(TodoItem todo)
    {
        todos.Remove(todo);
    }
    
    private void FilterAll()
    {
        currentFilter = "all";
    }
    
    private void FilterActive()
    {
        currentFilter = "active";
    }
    
    private void FilterCompleted()
    {
        currentFilter = "completed";
    }
    
    private void ClearCompleted()
    {
        todos.RemoveAll(t => t.IsCompleted);
    }
    
    private class TodoItem
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public bool IsCompleted { get; set; }
    }
}